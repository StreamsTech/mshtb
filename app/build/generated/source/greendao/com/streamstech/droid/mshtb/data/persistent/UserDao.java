package com.streamstech.droid.mshtb.data.persistent;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Loginname = new Property(2, String.class, "loginname", false, "LOGINNAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Mobile = new Property(4, String.class, "mobile", false, "MOBILE");
        public final static Property Loggedin = new Property(5, boolean.class, "loggedin", false, "LOGGEDIN");
        public final static Property Screenerid = new Property(6, String.class, "screenerid", false, "SCREENERID");
        public final static Property Locationid = new Property(7, String.class, "locationid", false, "LOCATIONID");
        public final static Property Locationname = new Property(8, String.class, "locationname", false, "LOCATIONNAME");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"LOGINNAME\" TEXT NOT NULL ," + // 2: loginname
                "\"PASSWORD\" TEXT NOT NULL ," + // 3: password
                "\"MOBILE\" TEXT NOT NULL ," + // 4: mobile
                "\"LOGGEDIN\" INTEGER NOT NULL ," + // 5: loggedin
                "\"SCREENERID\" TEXT NOT NULL ," + // 6: screenerid
                "\"LOCATIONID\" TEXT NOT NULL ," + // 7: locationid
                "\"LOCATIONNAME\" TEXT NOT NULL );"); // 8: locationname
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getLoginname());
        stmt.bindString(4, entity.getPassword());
        stmt.bindString(5, entity.getMobile());
        stmt.bindLong(6, entity.getLoggedin() ? 1L: 0L);
        stmt.bindString(7, entity.getScreenerid());
        stmt.bindString(8, entity.getLocationid());
        stmt.bindString(9, entity.getLocationname());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
        stmt.bindString(3, entity.getLoginname());
        stmt.bindString(4, entity.getPassword());
        stmt.bindString(5, entity.getMobile());
        stmt.bindLong(6, entity.getLoggedin() ? 1L: 0L);
        stmt.bindString(7, entity.getScreenerid());
        stmt.bindString(8, entity.getLocationid());
        stmt.bindString(9, entity.getLocationname());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getString(offset + 2), // loginname
            cursor.getString(offset + 3), // password
            cursor.getString(offset + 4), // mobile
            cursor.getShort(offset + 5) != 0, // loggedin
            cursor.getString(offset + 6), // screenerid
            cursor.getString(offset + 7), // locationid
            cursor.getString(offset + 8) // locationname
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setLoginname(cursor.getString(offset + 2));
        entity.setPassword(cursor.getString(offset + 3));
        entity.setMobile(cursor.getString(offset + 4));
        entity.setLoggedin(cursor.getShort(offset + 5) != 0);
        entity.setScreenerid(cursor.getString(offset + 6));
        entity.setLocationid(cursor.getString(offset + 7));
        entity.setLocationname(cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
