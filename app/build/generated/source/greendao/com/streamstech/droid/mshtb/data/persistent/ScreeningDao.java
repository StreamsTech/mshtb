package com.streamstech.droid.mshtb.data.persistent;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCREENING".
*/
public class ScreeningDao extends AbstractDao<Screening, Long> {

    public static final String TABLENAME = "SCREENING";

    /**
     * Properties of entity Screening.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Patientid = new Property(1, String.class, "patientid", false, "PATIENTID");
        public final static Property Q3 = new Property(2, int.class, "q3", false, "Q3");
        public final static Property Q3a = new Property(3, int.class, "q3a", false, "Q3A");
        public final static Property Q3b = new Property(4, int.class, "q3b", false, "Q3B");
        public final static Property Q4 = new Property(5, int.class, "q4", false, "Q4");
        public final static Property Q5 = new Property(6, int.class, "q5", false, "Q5");
        public final static Property Q6 = new Property(7, int.class, "q6", false, "Q6");
        public final static Property Q7 = new Property(8, int.class, "q7", false, "Q7");
        public final static Property Q7a = new Property(9, int.class, "q7a", false, "Q7A");
        public final static Property Q8 = new Property(10, int.class, "q8", false, "Q8");
        public final static Property Q8a = new Property(11, int.class, "q8a", false, "Q8A");
        public final static Property Q9 = new Property(12, int.class, "q9", false, "Q9");
        public final static Property Q9a = new Property(13, int.class, "q9a", false, "Q9A");
        public final static Property Q9aothers = new Property(14, String.class, "q9aothers", false, "Q9AOTHERS");
        public final static Property Q10 = new Property(15, int.class, "q10", false, "Q10");
        public final static Property Q11 = new Property(16, int.class, "q11", false, "Q11");
        public final static Property Q12 = new Property(17, int.class, "q12", false, "Q12");
        public final static Property Q13 = new Property(18, int.class, "q13", false, "Q13");
        public final static Property Createdtime = new Property(19, long.class, "createdtime", false, "CREATEDTIME");
        public final static Property Uploaded = new Property(20, boolean.class, "uploaded", false, "UPLOADED");
    }


    public ScreeningDao(DaoConfig config) {
        super(config);
    }
    
    public ScreeningDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCREENING\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PATIENTID\" TEXT NOT NULL ," + // 1: patientid
                "\"Q3\" INTEGER NOT NULL ," + // 2: q3
                "\"Q3A\" INTEGER NOT NULL ," + // 3: q3a
                "\"Q3B\" INTEGER NOT NULL ," + // 4: q3b
                "\"Q4\" INTEGER NOT NULL ," + // 5: q4
                "\"Q5\" INTEGER NOT NULL ," + // 6: q5
                "\"Q6\" INTEGER NOT NULL ," + // 7: q6
                "\"Q7\" INTEGER NOT NULL ," + // 8: q7
                "\"Q7A\" INTEGER NOT NULL ," + // 9: q7a
                "\"Q8\" INTEGER NOT NULL ," + // 10: q8
                "\"Q8A\" INTEGER NOT NULL ," + // 11: q8a
                "\"Q9\" INTEGER NOT NULL ," + // 12: q9
                "\"Q9A\" INTEGER NOT NULL ," + // 13: q9a
                "\"Q9AOTHERS\" TEXT," + // 14: q9aothers
                "\"Q10\" INTEGER NOT NULL ," + // 15: q10
                "\"Q11\" INTEGER NOT NULL ," + // 16: q11
                "\"Q12\" INTEGER NOT NULL ," + // 17: q12
                "\"Q13\" INTEGER NOT NULL ," + // 18: q13
                "\"CREATEDTIME\" INTEGER NOT NULL ," + // 19: createdtime
                "\"UPLOADED\" INTEGER NOT NULL );"); // 20: uploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCREENING\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Screening entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPatientid());
        stmt.bindLong(3, entity.getQ3());
        stmt.bindLong(4, entity.getQ3a());
        stmt.bindLong(5, entity.getQ3b());
        stmt.bindLong(6, entity.getQ4());
        stmt.bindLong(7, entity.getQ5());
        stmt.bindLong(8, entity.getQ6());
        stmt.bindLong(9, entity.getQ7());
        stmt.bindLong(10, entity.getQ7a());
        stmt.bindLong(11, entity.getQ8());
        stmt.bindLong(12, entity.getQ8a());
        stmt.bindLong(13, entity.getQ9());
        stmt.bindLong(14, entity.getQ9a());
 
        String q9aothers = entity.getQ9aothers();
        if (q9aothers != null) {
            stmt.bindString(15, q9aothers);
        }
        stmt.bindLong(16, entity.getQ10());
        stmt.bindLong(17, entity.getQ11());
        stmt.bindLong(18, entity.getQ12());
        stmt.bindLong(19, entity.getQ13());
        stmt.bindLong(20, entity.getCreatedtime());
        stmt.bindLong(21, entity.getUploaded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Screening entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPatientid());
        stmt.bindLong(3, entity.getQ3());
        stmt.bindLong(4, entity.getQ3a());
        stmt.bindLong(5, entity.getQ3b());
        stmt.bindLong(6, entity.getQ4());
        stmt.bindLong(7, entity.getQ5());
        stmt.bindLong(8, entity.getQ6());
        stmt.bindLong(9, entity.getQ7());
        stmt.bindLong(10, entity.getQ7a());
        stmt.bindLong(11, entity.getQ8());
        stmt.bindLong(12, entity.getQ8a());
        stmt.bindLong(13, entity.getQ9());
        stmt.bindLong(14, entity.getQ9a());
 
        String q9aothers = entity.getQ9aothers();
        if (q9aothers != null) {
            stmt.bindString(15, q9aothers);
        }
        stmt.bindLong(16, entity.getQ10());
        stmt.bindLong(17, entity.getQ11());
        stmt.bindLong(18, entity.getQ12());
        stmt.bindLong(19, entity.getQ13());
        stmt.bindLong(20, entity.getCreatedtime());
        stmt.bindLong(21, entity.getUploaded() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Screening readEntity(Cursor cursor, int offset) {
        Screening entity = new Screening( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // patientid
            cursor.getInt(offset + 2), // q3
            cursor.getInt(offset + 3), // q3a
            cursor.getInt(offset + 4), // q3b
            cursor.getInt(offset + 5), // q4
            cursor.getInt(offset + 6), // q5
            cursor.getInt(offset + 7), // q6
            cursor.getInt(offset + 8), // q7
            cursor.getInt(offset + 9), // q7a
            cursor.getInt(offset + 10), // q8
            cursor.getInt(offset + 11), // q8a
            cursor.getInt(offset + 12), // q9
            cursor.getInt(offset + 13), // q9a
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // q9aothers
            cursor.getInt(offset + 15), // q10
            cursor.getInt(offset + 16), // q11
            cursor.getInt(offset + 17), // q12
            cursor.getInt(offset + 18), // q13
            cursor.getLong(offset + 19), // createdtime
            cursor.getShort(offset + 20) != 0 // uploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Screening entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPatientid(cursor.getString(offset + 1));
        entity.setQ3(cursor.getInt(offset + 2));
        entity.setQ3a(cursor.getInt(offset + 3));
        entity.setQ3b(cursor.getInt(offset + 4));
        entity.setQ4(cursor.getInt(offset + 5));
        entity.setQ5(cursor.getInt(offset + 6));
        entity.setQ6(cursor.getInt(offset + 7));
        entity.setQ7(cursor.getInt(offset + 8));
        entity.setQ7a(cursor.getInt(offset + 9));
        entity.setQ8(cursor.getInt(offset + 10));
        entity.setQ8a(cursor.getInt(offset + 11));
        entity.setQ9(cursor.getInt(offset + 12));
        entity.setQ9a(cursor.getInt(offset + 13));
        entity.setQ9aothers(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQ10(cursor.getInt(offset + 15));
        entity.setQ11(cursor.getInt(offset + 16));
        entity.setQ12(cursor.getInt(offset + 17));
        entity.setQ13(cursor.getInt(offset + 18));
        entity.setCreatedtime(cursor.getLong(offset + 19));
        entity.setUploaded(cursor.getShort(offset + 20) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Screening entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Screening entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Screening entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
