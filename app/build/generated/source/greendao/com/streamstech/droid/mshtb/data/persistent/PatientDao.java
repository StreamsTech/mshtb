package com.streamstech.droid.mshtb.data.persistent;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PATIENT".
*/
public class PatientDao extends AbstractDao<Patient, Long> {

    public static final String TABLENAME = "PATIENT";

    /**
     * Properties of entity Patient.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Patientid = new Property(1, String.class, "patientid", false, "PATIENTID");
        public final static Property Screenerid = new Property(2, String.class, "screenerid", false, "SCREENERID");
        public final static Property Presumtivetb = new Property(3, boolean.class, "presumtivetb", false, "PRESUMTIVETB");
        public final static Property Tb = new Property(4, boolean.class, "tb", false, "TB");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Age = new Property(6, int.class, "age", false, "AGE");
        public final static Property Gender = new Property(7, String.class, "gender", false, "GENDER");
        public final static Property Createdtime = new Property(8, long.class, "createdtime", false, "CREATEDTIME");
        public final static Property Uploaded = new Property(9, boolean.class, "uploaded", false, "UPLOADED");
    }


    public PatientDao(DaoConfig config) {
        super(config);
    }
    
    public PatientDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PATIENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PATIENTID\" TEXT NOT NULL ," + // 1: patientid
                "\"SCREENERID\" TEXT NOT NULL ," + // 2: screenerid
                "\"PRESUMTIVETB\" INTEGER NOT NULL ," + // 3: presumtivetb
                "\"TB\" INTEGER NOT NULL ," + // 4: tb
                "\"NAME\" TEXT NOT NULL ," + // 5: name
                "\"AGE\" INTEGER NOT NULL ," + // 6: age
                "\"GENDER\" TEXT NOT NULL ," + // 7: gender
                "\"CREATEDTIME\" INTEGER NOT NULL ," + // 8: createdtime
                "\"UPLOADED\" INTEGER NOT NULL );"); // 9: uploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PATIENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Patient entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPatientid());
        stmt.bindString(3, entity.getScreenerid());
        stmt.bindLong(4, entity.getPresumtivetb() ? 1L: 0L);
        stmt.bindLong(5, entity.getTb() ? 1L: 0L);
        stmt.bindString(6, entity.getName());
        stmt.bindLong(7, entity.getAge());
        stmt.bindString(8, entity.getGender());
        stmt.bindLong(9, entity.getCreatedtime());
        stmt.bindLong(10, entity.getUploaded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Patient entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPatientid());
        stmt.bindString(3, entity.getScreenerid());
        stmt.bindLong(4, entity.getPresumtivetb() ? 1L: 0L);
        stmt.bindLong(5, entity.getTb() ? 1L: 0L);
        stmt.bindString(6, entity.getName());
        stmt.bindLong(7, entity.getAge());
        stmt.bindString(8, entity.getGender());
        stmt.bindLong(9, entity.getCreatedtime());
        stmt.bindLong(10, entity.getUploaded() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Patient readEntity(Cursor cursor, int offset) {
        Patient entity = new Patient( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // patientid
            cursor.getString(offset + 2), // screenerid
            cursor.getShort(offset + 3) != 0, // presumtivetb
            cursor.getShort(offset + 4) != 0, // tb
            cursor.getString(offset + 5), // name
            cursor.getInt(offset + 6), // age
            cursor.getString(offset + 7), // gender
            cursor.getLong(offset + 8), // createdtime
            cursor.getShort(offset + 9) != 0 // uploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Patient entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPatientid(cursor.getString(offset + 1));
        entity.setScreenerid(cursor.getString(offset + 2));
        entity.setPresumtivetb(cursor.getShort(offset + 3) != 0);
        entity.setTb(cursor.getShort(offset + 4) != 0);
        entity.setName(cursor.getString(offset + 5));
        entity.setAge(cursor.getInt(offset + 6));
        entity.setGender(cursor.getString(offset + 7));
        entity.setCreatedtime(cursor.getLong(offset + 8));
        entity.setUploaded(cursor.getShort(offset + 9) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Patient entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Patient entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Patient entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
