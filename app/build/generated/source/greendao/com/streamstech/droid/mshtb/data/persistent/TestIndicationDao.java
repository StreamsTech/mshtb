package com.streamstech.droid.mshtb.data.persistent;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_INDICATION".
*/
public class TestIndicationDao extends AbstractDao<TestIndication, Long> {

    public static final String TABLENAME = "TEST_INDICATION";

    /**
     * Properties of entity TestIndication.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Patientid = new Property(1, String.class, "patientid", false, "PATIENTID");
        public final static Property Xray = new Property(2, boolean.class, "xray", false, "XRAY");
        public final static Property Xpert = new Property(3, boolean.class, "xpert", false, "XPERT");
        public final static Property Smear = new Property(4, boolean.class, "smear", false, "SMEAR");
        public final static Property Ultrasound = new Property(5, boolean.class, "ultrasound", false, "ULTRASOUND");
        public final static Property Histopathology = new Property(6, boolean.class, "histopathology", false, "HISTOPATHOLOGY");
        public final static Property Ctmri = new Property(7, boolean.class, "ctmri", false, "CTMRI");
        public final static Property Histopathology_sample = new Property(8, String.class, "histopathology_sample", false, "HISTOPATHOLOGY_SAMPLE");
        public final static Property Other = new Property(9, String.class, "other", false, "OTHER");
        public final static Property Createdtime = new Property(10, long.class, "createdtime", false, "CREATEDTIME");
        public final static Property Uploaded = new Property(11, boolean.class, "uploaded", false, "UPLOADED");
    }


    public TestIndicationDao(DaoConfig config) {
        super(config);
    }
    
    public TestIndicationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_INDICATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PATIENTID\" TEXT NOT NULL ," + // 1: patientid
                "\"XRAY\" INTEGER NOT NULL ," + // 2: xray
                "\"XPERT\" INTEGER NOT NULL ," + // 3: xpert
                "\"SMEAR\" INTEGER NOT NULL ," + // 4: smear
                "\"ULTRASOUND\" INTEGER NOT NULL ," + // 5: ultrasound
                "\"HISTOPATHOLOGY\" INTEGER NOT NULL ," + // 6: histopathology
                "\"CTMRI\" INTEGER NOT NULL ," + // 7: ctmri
                "\"HISTOPATHOLOGY_SAMPLE\" TEXT," + // 8: histopathology_sample
                "\"OTHER\" TEXT," + // 9: other
                "\"CREATEDTIME\" INTEGER NOT NULL ," + // 10: createdtime
                "\"UPLOADED\" INTEGER NOT NULL );"); // 11: uploaded
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_INDICATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TestIndication entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPatientid());
        stmt.bindLong(3, entity.getXray() ? 1L: 0L);
        stmt.bindLong(4, entity.getXpert() ? 1L: 0L);
        stmt.bindLong(5, entity.getSmear() ? 1L: 0L);
        stmt.bindLong(6, entity.getUltrasound() ? 1L: 0L);
        stmt.bindLong(7, entity.getHistopathology() ? 1L: 0L);
        stmt.bindLong(8, entity.getCtmri() ? 1L: 0L);
 
        String histopathology_sample = entity.getHistopathology_sample();
        if (histopathology_sample != null) {
            stmt.bindString(9, histopathology_sample);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(10, other);
        }
        stmt.bindLong(11, entity.getCreatedtime());
        stmt.bindLong(12, entity.getUploaded() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TestIndication entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPatientid());
        stmt.bindLong(3, entity.getXray() ? 1L: 0L);
        stmt.bindLong(4, entity.getXpert() ? 1L: 0L);
        stmt.bindLong(5, entity.getSmear() ? 1L: 0L);
        stmt.bindLong(6, entity.getUltrasound() ? 1L: 0L);
        stmt.bindLong(7, entity.getHistopathology() ? 1L: 0L);
        stmt.bindLong(8, entity.getCtmri() ? 1L: 0L);
 
        String histopathology_sample = entity.getHistopathology_sample();
        if (histopathology_sample != null) {
            stmt.bindString(9, histopathology_sample);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(10, other);
        }
        stmt.bindLong(11, entity.getCreatedtime());
        stmt.bindLong(12, entity.getUploaded() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TestIndication readEntity(Cursor cursor, int offset) {
        TestIndication entity = new TestIndication( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // patientid
            cursor.getShort(offset + 2) != 0, // xray
            cursor.getShort(offset + 3) != 0, // xpert
            cursor.getShort(offset + 4) != 0, // smear
            cursor.getShort(offset + 5) != 0, // ultrasound
            cursor.getShort(offset + 6) != 0, // histopathology
            cursor.getShort(offset + 7) != 0, // ctmri
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // histopathology_sample
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // other
            cursor.getLong(offset + 10), // createdtime
            cursor.getShort(offset + 11) != 0 // uploaded
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TestIndication entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPatientid(cursor.getString(offset + 1));
        entity.setXray(cursor.getShort(offset + 2) != 0);
        entity.setXpert(cursor.getShort(offset + 3) != 0);
        entity.setSmear(cursor.getShort(offset + 4) != 0);
        entity.setUltrasound(cursor.getShort(offset + 5) != 0);
        entity.setHistopathology(cursor.getShort(offset + 6) != 0);
        entity.setCtmri(cursor.getShort(offset + 7) != 0);
        entity.setHistopathology_sample(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setOther(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCreatedtime(cursor.getLong(offset + 10));
        entity.setUploaded(cursor.getShort(offset + 11) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TestIndication entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TestIndication entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TestIndication entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
